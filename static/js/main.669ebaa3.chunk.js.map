{"version":3,"sources":["components/preview-list/preview-cards/preview-card.js","components/preview-list/preview-cards.js","components/preview-list.js","components/detailed-card.js","App.js","serviceWorker.js","index.js"],"names":["S","Card","styled","div","Img","img","Type","props","color","TypeContainer","PreviewCard","types","map","type","i","key","name","data-i","id","onClick","select","src","alt","PreviewCards","pokemons","pokemon","FilterContainer","button","CardsContainer","LoadButton","PreviewList","showLoad","Fragment","loadMore","Title","h2","Table","table","Caption","caption","Td","td","NoWrap","DetailedCard","toString","length","title","LIMIT","MEDIA_WIDTH","TYPE_COLORS","App","state","url","selected","fetchPokemons","fetch","then","res","json","pokemonList","promises","results","forEach","push","sprites","front_default","Name","capitalize","v","Defense","stats","base_stat","Attack","HP","Speed","Weight","weight","moves","catch","err","console","log","Promise","all","sort","a","b","setState","next","str","charAt","toUpperCase","slice","selectPokemon","e","currentTarget","dataset","deselect","offsetWidth","this","Container","CardContaiter","PreviewListContainer","DetailedCardContainer","width","Component","h1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.669ebaa3.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nfunction PreviewCard(props) {\r\n\r\n  let types = props.types.map((type, i) => <S.Type key={i} color={type.color}>{type.name}</S.Type>)\r\n  \r\n  return(\r\n  <S.Card\r\n    data-i={props.i}\r\n    key={props.id}\r\n    onClick={props.select}\r\n    >\r\n    <S.Img src={props.img} alt={props.name} />\r\n    <strong>{props.name}</strong>\r\n    <S.TypeContainer>\r\n      {types}\r\n    </S.TypeContainer>\r\n  </S.Card>\r\n  )\r\n}\r\n\r\nconst S = {}\r\n\r\n\r\nS.Card = styled.div`\r\n  display: flex;\r\n  flex: 0 0 auto;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 140px;\r\n  height: 160px;\r\n  border: solid;\r\n  margin: 2px;\r\n  padding: 0 0px 5px 0px;\r\n  background-color: lightgray;\r\n  :hover {\r\n    background-color: skyblue;\r\n  }\r\n`\r\n\r\nS.Img = styled.img`\r\n`\r\n\r\nS.Type = styled.div`\r\n  margin: 2px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  background-color: ${props => props.color};\r\n`\r\n\r\nS.TypeContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nexport default PreviewCard\r\n","import React from 'react'\r\n\r\nimport PreviewCard from './preview-cards/preview-card'\r\n\r\nfunction PreviewCards(props) {\r\n\r\n  let cards = props.pokemons.map((pokemon, i) => (\r\n    <PreviewCard \r\n      i={i} \r\n      key={pokemon.id}\r\n      id={pokemon.id} \r\n      select={props.select} \r\n      types={pokemon['Type']}\r\n      img={pokemon.img}\r\n      name={pokemon['Name']}\r\n    />\r\n  ))\r\n  \r\n  return cards\r\n}\r\n\r\nexport default PreviewCards\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport PreviewCards from './preview-list/preview-cards'\r\n\r\nfunction PreviewList(props) {\r\n  \r\n  // Hide 'Load More' if all loaded\r\n  if (props.showLoad) {\r\n    return(\r\n      <React.Fragment>\r\n        <S.CardsContainer>\r\n          <PreviewCards select={props.select} pokemons={props.pokemons}/>\r\n        </S.CardsContainer>\r\n        <S.LoadButton onClick={props.loadMore}>\r\n          <strong>Load More</strong>\r\n        </S.LoadButton>\r\n      </React.Fragment>\r\n    )\r\n  } else {\r\n    return(\r\n      <React.Fragment>\r\n      <S.CardsContainer>\r\n        <PreviewCards select={props.select} pokemons={props.pokemons}/>\r\n      </S.CardsContainer>\r\n    </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst S = {}\r\n\r\nS.FilterContainer = styled.button`\r\n  flex: 1;\r\n  width: 100%;\r\n  color: white;\r\n  text-decoration: none;\r\n  border: none;\r\n  background-color: dodgerblue;\r\n  :hover {\r\n    background-color: skyblue;\r\n  }\r\n`\r\n\r\nS.CardsContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex: 14;\r\n  justify-content: center;\r\n  align-content: flex-start;\r\n  overflow: auto;\r\n`\r\n\r\nS.LoadButton = styled.button`\r\n  flex: 1;\r\n  width: 100%;\r\n  color: white;\r\n  text-decoration: none;\r\n  border: none;\r\n  background-color: dodgerblue;\r\n  :hover {\r\n    background-color: skyblue;\r\n  }\r\n`\r\n\r\n\r\nexport default PreviewList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nfunction DetailedCard(props) {\r\n  // Hide if nothing selected\r\n  if(!props.pokemon) return null\r\n\r\n  let id = props.pokemon['id'].toString()\r\n  while (id.length < 3) id = '0' + id\r\n  let title = `${props.pokemon['Name']} #${id}`\r\n\r\n  let types = props.pokemon['Type'].map((type, i) => <S.Type key={i} color={type.color}>{type.name}</S.Type>)\r\n\r\n  return (\r\n    <S.Card>\r\n      <S.Img src={props.pokemon.img} alt={props.pokemon['Name']} />\r\n      <S.Title>{title}</S.Title>\r\n      <S.Table>\r\n        <S.Caption>Pokemon stats</S.Caption>\r\n        <tbody>\r\n          <tr>\r\n            <S.Td>Type</S.Td>\r\n            <S.Td>{types}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td>Attack</S.Td>\r\n            <S.Td>{props.pokemon['Attack']}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td>Defense</S.Td>\r\n            <S.Td>{props.pokemon['Defense']}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td>HP</S.Td>\r\n            <S.Td>{props.pokemon['HP']}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td><S.NoWrap>SP Attack</S.NoWrap></S.Td>\r\n            <S.Td>{props.pokemon['SP Attack']}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td><S.NoWrap>SP Defense</S.NoWrap></S.Td>\r\n            <S.Td>{props.pokemon['SP Defense']}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td>Speed</S.Td>\r\n            <S.Td>{props.pokemon['Speed']}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td>Weight</S.Td>\r\n            <S.Td>{props.pokemon['Weight']}</S.Td>\r\n          </tr>\r\n          <tr>\r\n            <S.Td><S.NoWrap>Total moves</S.NoWrap></S.Td>\r\n            <S.Td>{props.pokemon['Total moves']}</S.Td>\r\n          </tr>\r\n        </tbody>\r\n      </S.Table>\r\n    </S.Card>\r\n  )\r\n}\r\n\r\nconst S = {}\r\n\r\nS.Card = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 610px;\r\n  width: 200px;\r\n  padding: 0 10px 10px 10px;\r\n  border: solid;\r\n  background-color: lightgrey;\r\n`\r\n\r\nS.Img = styled.img`\r\n  width: 200px; \r\n  height: 200px;\r\n  //margin: -50px;\r\n`\r\n\r\nS.Title = styled.h2`\r\n  text-align: center;\r\n  margin: 5px;\r\n`\r\n\r\nS.Table = styled.table`\r\n  border-collapse: collapse;\r\n  text-align: center;\r\n`\r\n\r\nS.Caption = styled.caption`\r\n  caption-side: bottom;\r\n`\r\n\r\nS.Td = styled.td`\r\n  border: solid;\r\n  padding: 5px 10px;\r\n`\r\n\r\nS.Type = styled.div`\r\n  margin: 2px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  background-color: ${props => props.color};\r\n`\r\n\r\nS.NoWrap = styled.div`\r\n  white-space: nowrap;\r\n`\r\n\r\nexport default DetailedCard\r\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nimport PreviewList from './components/preview-list'\nimport DetailedCard from './components/detailed-card'\n\n// Pokemons limit for each load\nconst LIMIT = 12\n// Max-width media quary for small resolution\nconst MEDIA_WIDTH = 450\nconst TYPE_COLORS = {\n  'normal': '#A8A878',\n  'fire': '#F08030',\n  'water': '#6890F0',\n  'electric': '#F8D030',\n  'grass': '#78C850',\n  'ice': '#98D8D8',\n  'ground': '#E0C068',\n  'flying': '#A890F0',\n  'ghost': '#705898',\n  'rock': '#B8A038',\n  'fighting': '#C03028',\n  'poison': '#A040A0',\n  'psychic': '#F85888',\n  'bug': '#A8B820',\n  'dark': '#705848',\n  'steel': '#B8B8D0',\n  'dragon': '#7038F8',\n  'fairy': '#EE99AC',\n  '?': 'grey'\n}\n\nexport class App extends Component {\n\n  state = {\n    url: 'https://pokeapi.co/api/v2/pokemon?limit=' + LIMIT,\n    pokemons: [],\n    selected: false\n  }\n\n  componentDidMount() {\n    this.fetchPokemons()\n  }\n\n  fetchPokemons = () => {\n    fetch(this.state.url)\n    .then(res => res.json())\n    .then(pokemonList => {\n      let pokemons = []\n      // Promises are used for less re-renders\n      let promises = []\n      pokemonList.results.forEach(pokemon => {\n        promises.push(\n          fetch(pokemon.url)\n          .then(res => res.json())\n          .then(pokemon => { \n            pokemons = [...pokemons, {\n              id: pokemon.id,\n              img: pokemon.sprites.front_default,\n              Name: this.capitalize(pokemon.name),\n              Type: pokemon.types.map(v => ({name: this.capitalize(v.type.name), color: TYPE_COLORS[v.type.name] ? TYPE_COLORS[v.type.name] : TYPE_COLORS['?']})),\n              Defense: pokemon.stats[3].base_stat,\n              Attack: pokemon.stats[4].base_stat,\n              HP: pokemon.stats[5].base_stat,\n              'SP Attack': pokemon.stats[2].base_stat,\n              'SP Defense': pokemon.stats[1].base_stat,\n              Speed: pokemon.stats[0].base_stat,\n              Weight: pokemon.weight,\n              'Total moves': pokemon.moves.length\n            }]\n          })\n          .catch(err => console.log('Error: ', err))\n        )\n      })\n      Promise.all(promises)\n      .then(() => {\n        pokemons.sort((a, b) => a.id - b.id)\n        this.setState({\n          url: pokemonList.next,\n          pokemons: [...this.state.pokemons, ...pokemons],\n        })\n      })\n      .catch(err => console.log('Error: ', err))\n    })\n    .catch(err => console.log('Error: ', err))\n  }\n\n  capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1)\n\n  selectPokemon = (e) => {\n    this.setState({\n      selected: this.state.pokemons[e.currentTarget.dataset.i]\n    })\n  }\n\n  // For small resolution\n  deselect = (e) => {\n    if (e.currentTarget.offsetWidth > MEDIA_WIDTH) return\n    this.setState({selected: false})\n  }\n\n  render() {\n    if(this.state.selected) {\n      return (\n        <S.Container onClick={this.deselect}>\n          <S.Title>Pokedex</S.Title>\n          <S.CardContaiter>\n            <S.PreviewListContainer>\n              <PreviewList types={TYPE_COLORS}select={this.selectPokemon} pokemons={this.state.pokemons} loadMore={this.fetchPokemons}/>\n            </S.PreviewListContainer >\n            <S.DetailedCardContainer width={MEDIA_WIDTH}>\n             <DetailedCard deselect={this.deselect} pokemon={this.state.selected} />\n            </S.DetailedCardContainer>\n          </S.CardContaiter>\n        </S.Container>\n      )\n    } else {\n      return (\n        <S.Container>\n          <S.Title>Pokedex</S.Title>\n          <S.CardContaiter>\n            <S.PreviewListContainer>\n              <PreviewList select={this.selectPokemon} pokemons={this.state.pokemons} loadMore={this.fetchPokemons} showLoad={this.state.url}/>\n            </S.PreviewListContainer >\n          </S.CardContaiter>\n        </S.Container>\n      )\n    }\n  }\n}\n\nconst S = {}\n\nS.Container = styled.div `\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  align-items: center;\n  font-family: sans-serif;\n  font-size: 14px;\n  padding: 10px;\n  height: 100vh;\n  background-color: grey;\n`\n\nS.Title = styled.h1`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n`\n\nS.CardContaiter = styled.div`\n  flex: 9;\n  overflow: hidden;\n  display: flex;\n`\n\nS.PreviewListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: flex-start;\n  overflow: auto;\n`\n\nS.DetailedCardContainer = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  overflow: auto;\n  @media (max-width: ${props => props.width}px) {\n    position: absolute;\n    align-items: center;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(128, 128, 128, 0.8);\n  }\n`\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}